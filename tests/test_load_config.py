from src.configuration.config import load_config
import os

# test_config.py - Generated by CodiumAI

import pytest

"""
Code Analysis:
- - The main goal of the function is to load configuration from an env.secrets file.
- The function takes in a boolean parameter 'testing', which defaults to False.
- If 'testing' is True, it loads the configuration from a .env.test.secrets file.
- Otherwise, it loads the configuration from a .env.secrets file.
- The function uses the 'path' module to get the absolute path of the directory containing the current file.
- It then uses the 'load_dotenv' function from the 'dotenv' module to load the configuration from the appropriate file.
- The function does not return anything, it simply loads the configuration.
"""

"""
Test Plan:
- test_load_config_happy_path_default(): tests that load_config function loads configuration
 from .env.secrets file with default parameter value. Tags: [happy path]
- test_load_config_happy_path_testing(): tests that load_config function loads configuration
 from .env.test.secrets file with testing parameter value set to True. Tags: [happy path]
- test_load_config_edge_case_nonexistent_file(): tests that load_config function
 raises an exception if the file cannot be loaded. Tags: [edge case]
- test_load_config_edge_case_incorrect_format(): tests that load_config function
raises an exception if the file has an incorrect format. Tags: [edge case]
- test_load_config_general_behavior_correct_variables(): tests that load_config function
 loads the correct configuration variables. Tags: [general behavior]
- test_load_config_edge_case_missing_variables(): tests that load_config function
raises an exception if the file is missing required variables. Tags: [edge case]

Additional instructions:
 - Use "Arrange, Act, Assert" style.
"""
current_directory = os.path.dirname(os.path.abspath(__file__))
TESTING_CONFIG_FILE = "/home/scott/Repo/Static_Pages/.env.test.secrets"


class TestLoadConfig:
    def test_load_config_happy_path_default(self):
        # Arrange
        expected_var1 = "value1"
        expected_var2 = "value2"

        # Act
        load_config(TESTING_CONFIG_FILE, ["VAR1", "VAR2"])
        actual_var1 = os.getenv("VAR1")
        actual_var2 = os.getenv("VAR2")

        # Assert
        assert actual_var1 == expected_var1
        assert actual_var2 == expected_var2

    def test_load_config_happy_path_testing(self):
        # Arrange
        expected_var1 = "test_value1"
        expected_var2 = "test_value2"

        # Act
        load_config(TESTING_CONFIG_FILE, ["TESTVAR1", "TESTVAR2"])
        actual_var1 = os.getenv("TESTVAR1")
        actual_var2 = os.getenv("TESTVAR2")

        # Assert
        assert actual_var1 == expected_var1
        assert actual_var2 == expected_var2

    def test_load_config_edge_case_nonexistent_file(self):
        # Arrange

        # Act & Assert
        with pytest.raises(FileNotFoundError):
            load_config("", ["VAR1"])

    def test_load_config_edge_case_incorrect_format(self):
        # Arrange

        # Act & Assert
        result = load_config(TESTING_CONFIG_FILE, ["BADVALUE"])
        assert result is False

    def test_load_config_general_behavior_correct_variables(self):
        # Arrange
        expected_var1 = "value1"
        expected_var2 = "value2"

        # Act
        load_config(TESTING_CONFIG_FILE, ["VAR1", "VAR2"])
        actual_var1 = os.getenv("VAR1")
        actual_var2 = os.getenv("VAR2")

        # Assert
        assert actual_var1 == expected_var1
        assert actual_var2 == expected_var2

    def test_load_config_edge_case_missing_variables(self):
        # Arrange

        # Act & Assert
        result = load_config(TESTING_CONFIG_FILE, ["MISSING"])
        assert result is False
